From 3fcb931ca7da934a3971c3c6f485ce6fc4b2fc67 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Sat, 30 Apr 2022 22:49:13 +0200
Subject: [PATCH] Some ChunkGenData


diff --git a/src/main/java/net/minecraft/server/ChunkProviderGenerate.java b/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
index 1c08afa5..942179ae 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
@@ -1,7 +1,10 @@
 package net.minecraft.server;
 
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.Random;
+import java.util.concurrent.ConcurrentHashMap;
 
 public class ChunkProviderGenerate implements IChunkProvider {
 
@@ -28,11 +31,32 @@ public class ChunkProviderGenerate implements IChunkProvider {
     private WorldGenLargeFeature y;
     private WorldGenBase z;
     private WorldGenMonument A;
-    private BiomeBase[] B;
+    /*private BiomeBase[] B;
     double[] d;
     double[] e;
     double[] f;
-    double[] g;
+    double[] g;*/
+
+    private final Map<Long, ChunkGenData> chunkGenData = new ConcurrentHashMap<>();
+
+    public ChunkGenData getChunkData(Thread thread) {
+        return chunkGenData.computeIfAbsent(thread.getId(), (key) -> {
+            System.out.println("Creating new ChunkGenData for thread " + key);
+            return new ChunkGenData();
+        });
+    }
+
+    public ChunkGenData getChunkData() {
+        return this.getChunkData(Thread.currentThread());
+    }
+
+    private static class ChunkGenData {
+        private BiomeBase[] B;
+        private double[] d;
+        private double[] e;
+        private double[] f;
+        private double[] g;
+    }
 
     public ChunkProviderGenerate(World world, long i, boolean flag, String s) {
         this.s = Blocks.WATER;
@@ -75,7 +99,7 @@ public class ChunkProviderGenerate implements IChunkProvider {
     }
 
     public void a(int i, int j, ChunkSnapshot chunksnapshot) {
-        this.B = this.m.getWorldChunkManager().getBiomes(this.B, i * 4 - 2, j * 4 - 2, 10, 10);
+        this.getChunkData().B = this.m.getWorldChunkManager().getBiomes(this.getChunkData().B, i * 4 - 2, j * 4 - 2, 10, 10);
         this.a(i * 4, 0, j * 4);
 
         for (int k = 0; k < 4; ++k) {
@@ -154,8 +178,8 @@ public class ChunkProviderGenerate implements IChunkProvider {
         ChunkSnapshot chunksnapshot = new ChunkSnapshot();
 
         this.a(i, j, chunksnapshot);
-        this.B = this.m.getWorldChunkManager().getBiomeBlock(this.B, i * 16, j * 16, 16, 16);
-        this.a(i, j, chunksnapshot, this.B);
+        this.getChunkData().B = this.m.getWorldChunkManager().getBiomeBlock(this.getChunkData().B, i * 16, j * 16, 16, 16);
+        this.a(i, j, chunksnapshot, this.getChunkData().B);
         if (this.r.r && this.m.paperConfigTitanium.generatorSettings.caves) { // PaperSpigot
             this.u.a(this, this.m, i, j, chunksnapshot);
         }
@@ -188,7 +212,7 @@ public class ChunkProviderGenerate implements IChunkProvider {
         byte[] abyte = chunk.getBiomeIndex();
 
         for (int k = 0; k < abyte.length; ++k) {
-            abyte[k] = (byte) this.B[k].id;
+            abyte[k] = (byte) this.getChunkData().B[k].id;
         }
 
         chunk.initLighting();
@@ -196,13 +220,13 @@ public class ChunkProviderGenerate implements IChunkProvider {
     }
 
     private void a(int i, int j, int k) {
-        this.g = this.b.a(this.g, i, k, 5, 5, (double) this.r.e, (double) this.r.f, (double) this.r.g);
+        this.getChunkData().g = this.b.a(this.getChunkData().g, i, k, 5, 5, (double) this.r.e, (double) this.r.f, (double) this.r.g);
         float f = this.r.a;
         float f1 = this.r.b;
 
-        this.d = this.k.a(this.d, i, j, k, 5, 33, 5, (double) (f / this.r.h), (double) (f1 / this.r.i), (double) (f / this.r.j));
-        this.e = this.i.a(this.e, i, j, k, 5, 33, 5, (double) f, (double) f1, (double) f);
-        this.f = this.j.a(this.f, i, j, k, 5, 33, 5, (double) f, (double) f1, (double) f);
+        this.getChunkData().d = this.k.a(this.getChunkData().d, i, j, k, 5, 33, 5, (double) (f / this.r.h), (double) (f1 / this.r.i), (double) (f / this.r.j));
+        this.getChunkData().e = this.i.a(this.getChunkData().e, i, j, k, 5, 33, 5, (double) f, (double) f1, (double) f);
+        this.getChunkData().f = this.j.a(this.getChunkData().f, i, j, k, 5, 33, 5, (double) f, (double) f1, (double) f);
         boolean flag = false;
         boolean flag1 = false;
         int l = 0;
@@ -214,11 +238,11 @@ public class ChunkProviderGenerate implements IChunkProvider {
                 float f3 = 0.0F;
                 float f4 = 0.0F;
                 byte b0 = 2;
-                BiomeBase biomebase = this.B[j1 + 2 + (k1 + 2) * 10];
+                BiomeBase biomebase = this.getChunkData().B[j1 + 2 + (k1 + 2) * 10];
 
                 for (int l1 = -b0; l1 <= b0; ++l1) {
                     for (int i2 = -b0; i2 <= b0; ++i2) {
-                        BiomeBase biomebase1 = this.B[j1 + l1 + 2 + (k1 + i2 + 2) * 10];
+                        BiomeBase biomebase1 = this.getChunkData().B[j1 + l1 + 2 + (k1 + i2 + 2) * 10];
                         float f5 = this.r.n + biomebase1.an * this.r.m;
                         float f6 = this.r.p + biomebase1.ao * this.r.o;
 
@@ -243,7 +267,7 @@ public class ChunkProviderGenerate implements IChunkProvider {
                 f3 /= f4;
                 f2 = f2 * 0.9F + 0.1F;
                 f3 = (f3 * 4.0F - 1.0F) / 8.0F;
-                double d0 = this.g[i1] / 8000.0D;
+                double d0 = this.getChunkData().g[i1] / 8000.0D;
 
                 if (d0 < 0.0D) {
                     d0 = -d0 * 0.3D;
@@ -281,9 +305,9 @@ public class ChunkProviderGenerate implements IChunkProvider {
                         d4 *= 4.0D;
                     }
 
-                    double d5 = this.e[l] / (double) this.r.d;
-                    double d6 = this.f[l] / (double) this.r.c;
-                    double d7 = (this.d[l] / 10.0D + 1.0D) / 2.0D;
+                    double d5 = this.getChunkData().e[l] / (double) this.r.d;
+                    double d6 = this.getChunkData().f[l] / (double) this.r.c;
+                    double d7 = (this.getChunkData().d[l] / 10.0D + 1.0D) / 2.0D;
                     double d8 = MathHelper.b(d5, d6, d7) - d4;
 
                     if (j2 > 29) {
-- 
2.32.0.windows.2

