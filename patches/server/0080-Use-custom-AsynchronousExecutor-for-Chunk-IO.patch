From 62c64250d9505f5cc16ad30a4e404e0d04e46832 Mon Sep 17 00:00:00 2001
From: Peridot <peridot491@protonmail.com>
Date: Wed, 25 May 2022 00:54:23 +0200
Subject: [PATCH] Use custom AsynchronousExecutor for Chunk IO


diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index f56bed36..a0f6ca64 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -9,6 +9,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
+import net.titanium.chunk.io.ChunkIOExecutor;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -18,7 +19,6 @@ import java.util.logging.Level;
 
 import org.bukkit.Bukkit;
 import org.bukkit.Server;
-import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
 import org.bukkit.craftbukkit.util.LongHash;
 import org.bukkit.craftbukkit.util.LongHashSet;
 import org.bukkit.craftbukkit.util.LongObjectHashMap;
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 958556f7..17a1629a 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -34,6 +34,7 @@ import java.util.concurrent.Callable;
 import java.util.concurrent.Executors;
 import java.util.concurrent.FutureTask;
 import javax.imageio.ImageIO;
+import net.titanium.chunk.io.ChunkIOExecutor;
 import net.titanium.config.TitaniumConfig;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
@@ -800,7 +801,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         SpigotTimings.processQueueTimer.stopTiming(); // Spigot
 
         SpigotTimings.chunkIOTickTimer.startTiming(); // Spigot
-        org.bukkit.craftbukkit.chunkio.ChunkIOExecutor.tick();
+        ChunkIOExecutor.tick();
         SpigotTimings.chunkIOTickTimer.stopTiming(); // Spigot
 
         SpigotTimings.timeUpdateTimer.startTiming(); // Spigot
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 38586aad..cbab0f6c 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -4,6 +4,7 @@ import com.google.common.collect.Lists;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
+import net.titanium.chunk.io.ChunkIOExecutor;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -11,7 +12,6 @@ import org.apache.logging.log4j.Logger;
 import java.util.Collections;
 import java.util.Queue;
 import java.util.LinkedList;
-import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
 import java.util.HashMap;
 // CraftBukkit end
 
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 2dfce6d5..e2e4625b 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -17,6 +17,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.UUID;
+import net.titanium.chunk.io.ChunkIOExecutor;
 import net.titanium.config.TitaniumConfig;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -24,7 +25,6 @@ import org.apache.logging.log4j.Logger;
 // CraftBukkit start
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
-import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
 
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
diff --git a/src/main/java/net/titanium/chunk/io/ChunkIOExecutor.java b/src/main/java/net/titanium/chunk/io/ChunkIOExecutor.java
new file mode 100644
index 00000000..de6ddeab
--- /dev/null
+++ b/src/main/java/net/titanium/chunk/io/ChunkIOExecutor.java
@@ -0,0 +1,41 @@
+package net.titanium.chunk.io;
+
+import net.minecraft.server.Chunk;
+import net.minecraft.server.ChunkProviderServer;
+import net.minecraft.server.ChunkRegionLoader;
+import net.minecraft.server.World;
+import net.titanium.config.TitaniumConfig;
+import net.titanium.util.async.executor.AsynchronousExecutor;
+
+public class ChunkIOExecutor {
+
+    static final int BASE_THREADS = TitaniumConfig.get().chunk.io.baseThreads; // PaperSpigot - Bumped value
+    static final int PLAYERS_PER_THREAD = TitaniumConfig.get().chunk.io.playersPerThread;
+
+    private static final AsynchronousExecutor<QueuedChunk, Chunk, RuntimeException, ChunkIOProvider> EXECUTOR = new AsynchronousExecutor<>(BASE_THREADS, new ChunkIOProvider());
+
+    public static Chunk syncChunkLoad(World world, ChunkRegionLoader loader, ChunkProviderServer provider, int x, int z) {
+        synchronized (EXECUTOR) { // Synchronize
+            return EXECUTOR.skipQueue(new QueuedChunk(x, z, loader, world, provider));
+        }
+    }
+
+    public static void queueChunkLoad(World world, ChunkRegionLoader loader, ChunkProviderServer provider, int x, int z, Runnable runnable) {
+        EXECUTOR.execute(new QueuedChunk(x, z, loader, world, provider), runnable);
+    }
+
+    // Abuses the fact that hashCode and equals for QueuedChunk only use world and coords
+    public static void dropQueuedChunkLoad(World world, int x, int z, Runnable runnable) {
+        EXECUTOR.drop(new QueuedChunk(x, z, null, world, null), runnable);
+    }
+
+    public static void adjustPoolSize(int players) {
+        int size = Math.max(BASE_THREADS, (int) Math.ceil(players / PLAYERS_PER_THREAD));
+        EXECUTOR.setActiveThreads(size);
+    }
+
+    public static void tick() {
+        EXECUTOR.finishActive();
+    }
+
+}
diff --git a/src/main/java/net/titanium/chunk/io/ChunkIOProvider.java b/src/main/java/net/titanium/chunk/io/ChunkIOProvider.java
new file mode 100644
index 00000000..34ebae4c
--- /dev/null
+++ b/src/main/java/net/titanium/chunk/io/ChunkIOProvider.java
@@ -0,0 +1,72 @@
+package net.titanium.chunk.io;
+
+import java.io.IOException;
+import net.minecraft.server.Chunk;
+import net.minecraft.server.ChunkRegionLoader;
+import net.minecraft.server.NBTTagCompound;
+import net.titanium.util.async.executor.CallbacksProvider;
+import org.bukkit.Server;
+import org.bukkit.craftbukkit.util.LongHash;
+
+public class ChunkIOProvider implements CallbacksProvider<QueuedChunk, Chunk, RuntimeException> {
+
+    @Override
+    public Chunk asyncStage(QueuedChunk queuedChunk) throws RuntimeException {
+        try {
+            ChunkRegionLoader loader = queuedChunk.loader;
+            Object[] data = loader.loadChunk(queuedChunk.world, queuedChunk.x, queuedChunk.z);
+
+            if (data != null) {
+                queuedChunk.compound = (NBTTagCompound) data[1];
+                return (Chunk) data[0];
+            }
+
+            return null;
+        } catch (IOException ex) {
+            throw new RuntimeException(ex);
+        }
+    }
+
+    @Override
+    public void syncStage(QueuedChunk queuedChunk, Chunk chunk) throws RuntimeException{
+        if (chunk == null) {
+            // If the chunk loading failed just do it synchronously (may generate)
+            queuedChunk.provider.originalGetChunkAt(queuedChunk.x, queuedChunk.z);
+            return;
+        }
+
+        queuedChunk.loader.loadEntities(chunk, queuedChunk.compound.getCompound("Level"), queuedChunk.world);
+        chunk.setLastSaved(queuedChunk.provider.world.getTime());
+        queuedChunk.provider.chunks.put(LongHash.toLong(queuedChunk.x, queuedChunk.z), chunk);
+        chunk.addEntities();
+
+        if (queuedChunk.provider.chunkProvider != null) {
+            queuedChunk.provider.world.timings.syncChunkLoadStructuresTimer.startTiming(); // Spigot
+            queuedChunk.provider.chunkProvider.recreateStructures(chunk, queuedChunk.x, queuedChunk.z);
+            queuedChunk.provider.world.timings.syncChunkLoadStructuresTimer.stopTiming(); // Spigot
+        }
+
+        Server server = queuedChunk.provider.world.getServer();
+        if (server != null) {
+            server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkLoadEvent(chunk.bukkitChunk, false));
+        }
+
+        // Update neighbor counts
+        for (int x = -2; x < 3; x++) {
+            for (int z = -2; z < 3; z++) {
+                if (x == 0 && z == 0) {
+                    continue;
+                }
+
+                Chunk neighbor = queuedChunk.provider.getChunkIfLoaded(chunk.locX + x, chunk.locZ + z);
+                if (neighbor != null) {
+                    neighbor.setNeighborLoaded(-x, -z);
+                    chunk.setNeighborLoaded(x, z);
+                }
+            }
+        }
+
+        chunk.loadNearby(queuedChunk.provider, queuedChunk.provider, queuedChunk.x, queuedChunk.z);
+    }
+
+}
diff --git a/src/main/java/net/titanium/chunk/io/QueuedChunk.java b/src/main/java/net/titanium/chunk/io/QueuedChunk.java
new file mode 100644
index 00000000..ef8aadd6
--- /dev/null
+++ b/src/main/java/net/titanium/chunk/io/QueuedChunk.java
@@ -0,0 +1,38 @@
+package net.titanium.chunk.io;
+
+import net.minecraft.server.ChunkProviderServer;
+import net.minecraft.server.ChunkRegionLoader;
+import net.minecraft.server.NBTTagCompound;
+import net.minecraft.server.World;
+
+class QueuedChunk {
+    final int x;
+    final int z;
+    final ChunkRegionLoader loader;
+    final World world;
+    final ChunkProviderServer provider;
+    NBTTagCompound compound;
+
+    public QueuedChunk(int x, int z, ChunkRegionLoader loader, World world, ChunkProviderServer provider) {
+        this.x = x;
+        this.z = z;
+        this.loader = loader;
+        this.world = world;
+        this.provider = provider;
+    }
+
+    @Override
+    public int hashCode() {
+        return (x * 31 + z * 29) ^ world.hashCode();
+    }
+
+    @Override
+    public boolean equals(Object object) {
+        if (object instanceof QueuedChunk) {
+            QueuedChunk other = (QueuedChunk) object;
+            return x == other.x && z == other.z && world == other.world;
+        }
+
+        return false;
+    }
+}
diff --git a/src/main/java/net/titanium/util/async/executor/AsynchronousExecutor.java b/src/main/java/net/titanium/util/async/executor/AsynchronousExecutor.java
new file mode 100644
index 00000000..f011fd28
--- /dev/null
+++ b/src/main/java/net/titanium/util/async/executor/AsynchronousExecutor.java
@@ -0,0 +1,213 @@
+package net.titanium.util.async.executor;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Queue;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+
+public class AsynchronousExecutor<I, O, E extends Throwable, P extends CallbacksProvider<I, O, E>> {
+
+    private final ThreadPoolExecutor pool;
+    private final P provider;
+
+    private final Map<I, Task> runningTasks = new HashMap<>();
+    private final Queue<Task> finishedTasks = new ConcurrentLinkedQueue<>();
+
+    public AsynchronousExecutor(int coreSize, P provider) {
+        this.pool = new ThreadPoolExecutor(coreSize, Integer.MAX_VALUE, 60, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
+        this.provider = provider;
+    }
+
+    /**
+     * Adds a callback to the parameter provided, adding parameter to the queue if needed.
+     * <p>
+     * This should always be synchronous.
+     */
+    public void execute(I input, Runnable callback) {
+        Task task = runningTasks.get(input);
+        if (task == null) {
+            runningTasks.put(input, task = new Task(input));
+            pool.execute(task);
+        }
+        task.callbacks.add(callback);
+    }
+
+    /**
+     * Processes a parameter as if it was in the queue, without ever passing to another thread.
+     */
+    public O skipQueue(I input) throws E {
+        Task task = runningTasks.get(input);
+        if (task != null) {
+            return task.finish();
+        }
+        O object = provider.asyncStage(input);
+        provider.syncStage(input, object);
+        return object;
+    }
+
+    /**
+     * This is the 'heartbeat' that should be called synchronously to finish any pending tasks
+     */
+    public void finishActive() {
+        while (!this.finishedTasks.isEmpty()) {
+            finishedTasks.poll().startSyncStage();
+        }
+    }
+
+    /**
+     * This removes a particular callback from the specified parameter.
+     * <p>
+     * If no callbacks remain for a given parameter, then the {@link net.titanium.util.async.executor.CallbacksProvider CallBackProvider's} stages may be omitted from execution.
+     * Stage 3 will have no callbacks, stage 2 will be skipped unless a {@link #get(Object)} is used, and stage 1 will be avoided on a best-effort basis.
+     * <p>
+     * Subsequent calls to {@link #skipQueue(Object)} will always work.
+     * <p>
+     * Subsequent calls to {@link #get(Object)} might work.
+     * <p>
+     * This should always be synchronous
+     * @return true if no further execution for the parameter is possible, such that, no exceptions will be thrown in {@link #finishActive()} for the parameter, and {@link #get(Object)} will throw an {@link IllegalStateException}, false otherwise
+     * @throws IllegalStateException if parameter is not in the queue anymore
+     * @throws IllegalStateException if the callback was not specified for given parameter
+     */
+    public boolean drop(I input, Runnable callback) {
+        Task task = runningTasks.get(input);
+        if (task == null) {
+            return true;
+        }
+        if (!task.callbacks.remove(callback)) {
+            throw new IllegalStateException("Unknown " + callback + " for " + input);
+        }
+        if (task.callbacks.isEmpty()) {
+            return task.drop();
+        }
+        return false;
+    }
+
+    /**
+     * This method attempts to skip the waiting period for said parameter.
+     * <p>
+     * This should always be synchronous.
+     * @throws IllegalStateException if the parameter is not in the queue anymore, or sometimes if called from asynchronous thread
+     */
+    public O get(I input) throws E, IllegalStateException {
+        Task task = runningTasks.get(input);
+        if (task == null) {
+            throw new IllegalStateException("Unknown " + input);
+        }
+        return task.finish();
+    }
+
+    public void setActiveThreads(final int coreSize) {
+        pool.setCorePoolSize(coreSize);
+    }
+
+    private class Task implements Runnable {
+
+        private final I input;
+        private O output;
+        private final Set<Runnable> callbacks = ConcurrentHashMap.newKeySet();
+        private E throwable;
+
+        private Stage asyncStage = Stage.PENDING;
+        private Stage syncStage = Stage.PENDING;
+
+        private Task(I input) {
+            this.input = input;
+        }
+
+        @Override
+        public void run() {
+            if (this.startAsyncStage()) {
+                finishedTasks.add(this);
+            }
+        }
+
+        public boolean startAsyncStage() {
+            asyncStage = Stage.STARTED;
+
+            try {
+                this.output = provider.asyncStage(input);
+            } catch (Throwable ex) {
+                this.throwable = (E) ex;
+            } finally {
+                synchronized (this) {
+                    asyncStage = Stage.COMPLETED;
+                    this.notifyAll();
+                }
+            }
+
+            return true;
+        }
+
+        public void startSyncStage() {
+            synchronized (this) {
+                while (asyncStage != Stage.COMPLETED) {
+                    try {
+                        this.wait();
+                    } catch (InterruptedException ex) {
+                        Thread.currentThread().interrupt();
+                        throw new RuntimeException("Unable to handle interruption on " + Thread.currentThread());
+                    }
+                }
+
+                try {
+                    syncStage = Stage.STARTED;
+
+                    provider.syncStage(this.input, this.output);
+                    for (Runnable callback : callbacks) {
+                        if (callback != null) {
+                            callback.run();
+                        }
+                    }
+                } catch (Throwable ex) {
+                    this.throwable = (E) ex;
+                } finally {
+                    runningTasks.remove(input);
+                    syncStage = Stage.COMPLETED;
+                }
+            }
+        }
+
+        public O finish() throws E {
+            this.asyncStage = Stage.STARTED;
+            this.output = provider.asyncStage(input);
+            if (this.throwable != null) {
+                throw this.throwable;
+            }
+            this.asyncStage = Stage.COMPLETED;
+
+            this.syncStage = Stage.STARTED;
+            provider.syncStage(this.input, this.output);
+            for (Runnable callback : callbacks) {
+                callback.run();
+            }
+            if (this.throwable != null) {
+                throw this.throwable;
+            }
+            this.syncStage = Stage.COMPLETED;
+
+            return this.output;
+        }
+
+        public boolean drop() {
+            if (asyncStage == Stage.PENDING || asyncStage == Stage.STARTED) {
+                runningTasks.remove(this.input);
+                return true;
+            }
+            return false;
+        }
+
+    }
+
+    private enum Stage {
+        PENDING,
+        STARTED,
+        COMPLETED
+    }
+
+}
diff --git a/src/main/java/net/titanium/util/async/executor/CallbacksProvider.java b/src/main/java/net/titanium/util/async/executor/CallbacksProvider.java
new file mode 100644
index 00000000..bc3071fd
--- /dev/null
+++ b/src/main/java/net/titanium/util/async/executor/CallbacksProvider.java
@@ -0,0 +1,9 @@
+package net.titanium.util.async.executor;
+
+public interface CallbacksProvider<I, O, E extends Throwable> {
+
+    O asyncStage(I input) throws E;
+
+    void syncStage(I input, O output) throws E;
+
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
index f02cb178..3f39eda8 100644
--- a/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
+++ b/src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
@@ -7,6 +7,10 @@ import net.minecraft.server.World;
 import net.titanium.config.TitaniumConfig;
 import org.bukkit.craftbukkit.util.AsynchronousExecutor;
 
+/**
+ * @deprecated use {@link net.titanium.chunk.io.ChunkIOExecutor}
+ */
+@Deprecated
 public class ChunkIOExecutor {
     static final int BASE_THREADS = TitaniumConfig.get().chunk.io.baseThreads; // PaperSpigot - Bumped value
     static final int PLAYERS_PER_THREAD = TitaniumConfig.get().chunk.io.playersPerThread;
-- 
2.36.0.windows.1

